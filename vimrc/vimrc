"Author: JuborajSD

" ru! defaults.vim
" aug vimStartup | au! | aug END
" let g:skip_defaults_vim = 1

set encoding=utf-8
set nocompatible
set ai
set vb
set number
set hidden
set mouse=a
set shortmess+=c
set updatetime=300
set rtp+=~/.fzf
set showmatch
set laststatus=2
set showmode
set clipboard=unnamed
set background=dark
set wildmode=list:longest,longest:full
set statusline+=%{gutentags#statusline()}
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

if &term =~ 'xterm-256color'    " mintty identifies itself as xterm-compatible
  if &t_Co == 8
    set t_Co = 256              " Use at least 256 colors
  endif
  set termguicolors           " Uncomment to allow truecolors on mintty
endif

"------------------------------------------------------------------------------
" Only do this part when compiled with support for autocommands.
if has("autocmd")
    " Set UTF-8 as the default encoding for commit messages
    autocmd BufReadPre COMMIT_EDITMSG,MERGE_MSG,git-rebase-todo setlocal fileencodings=utf-8

    " Remember the positions in files with some git-specific exceptions"
    autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$")
      \           && &filetype !~# 'commit\|gitrebase'
      \           && expand("%") !~ "ADD_EDIT.patch"
      \           && expand("%") !~ "addp-hunk-edit.diff" |
      \   exe "normal! g`\"" |
      \ endif

      autocmd BufNewFile,BufRead *.patch set filetype=diff

      autocmd Filetype diff
      \ highlight WhiteSpaceEOL ctermbg=red |
      \ match WhiteSpaceEOL /\(^+.*\)\@<=\s\+$/
endif " has("autocmd")
"----------------------------------------------------------------------------------

" ===== Vim-plug =====
call plug#begin('~/.vim/plugged')
Plug 'cormacrelf/vim-colors-github'
Plug 'pineapplegiant/spaceduck', { 'branch': 'main' },
Plug 'mhinz/vim-startify'
Plug 'sheerun/vim-polyglot'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'dense-analysis/ale'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'prettier/vim-prettier', { 'do': 'yarn install --frozen-lockfile --production' }
Plug 'xolox/vim-misc'
Plug 'xolox/vim-colorscheme-switcher'
Plug 'preservim/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'ap/vim-css-color'
Plug 'KabbAmine/vCoolor.vim'
Plug 'rust-lang/rust.vim'
Plug 'mattn/emmet-vim'
Plug 'dpelle/vim-languagetool'
Plug 'scrooloose/nerdcommenter'
Plug 'junegunn/vim-easy-align'
Plug 'rstacruz/sparkup'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'kien/rainbow_parentheses.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'yuttie/comfortable-motion.vim'
Plug 'ryanoasis/vim-webdevicons'
Plug 'ludovicchabant/vim-gutentags'
" Plug 'turbio/bracey.vim', {'do': 'npm install --prefix server'}
" Plug 'AtsushiM/search-parent.vim'      ' uncomment this and scss compiler if working with scss
" Plug 'AtsushiM/sass-compile.vim'        ' scss compiler
call plug#end()


" ======= Startify ======
let g:startify_custom_header = [
\ '',
\ '   __     __     ______     __         ______     ______     __    __     ______    ',
\ '  /\ \  _ \ \   /\  ___\   /\ \       /\  ___\   /\  __ \   /\ "-./  \   /\  ___\   ',
\ '  \ \ \/ ".\ \  \ \  __\   \ \ \____  \ \ \____  \ \ \/\ \  \ \ \-./\ \  \ \  __\   ',
\ '   \ \__/".~\_\  \ \_____\  \ \_____\  \ \_____\  \ \_____\  \ \_\ \ \_\  \ \_____\ ',
\ '    \/_/   \/_/   \/_____/   \/_____/   \/_____/   \/_____/   \/_/  \/_/   \/_____/ ',
\'',
\'',
\ ]

" ====== Theme ======
 if exists('+termguicolors')
      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
      set termguicolors
    endif

syntax enable
colorscheme spaceduck

" ======= Vim-airline stausbar ======
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline_powerline_fonts = 1

" ======== NerdTree ======
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''
autocmd VimEnter * NERDTree | wincmd p
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" =========== Ale ============
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier','eslint'],
\}

let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠️'
let g:ale_lint_on_enter = 0
let g:ale_fix_on_save = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_completion_enabled = 1
let g:ale_completion_autoimport = 1
let g:ale_javascript_importjs = 1
let g:airline#extensions#ale#enabled = 1

" ========= Coc nvim =========
if has("nvim-0.5.0") || has("patch-8.1.1564")
  set signcolumn=number
else
  set signcolumn=yes
endif

let g:coc_start_at_startup = 1
let g:coc_global_extensions = ['coc-tslint-plugin', 'coc-tsserver', 'coc-snippets', 'coc-pairs', 'coc-css', 'coc-html', 'coc-json', 'coc-sh', 'coc-python', 'coc-pyright', 'coc-rls', 'coc-emmet', 'coc-yank', 'coc-tailwindcss', 'es7-react-js-snippets', 'jest-snippets', 'path-intellisense']
let g:coc_data_home = 'C:\\Users\\Local user\\.config\\coc' " add your .config/coc path here

" ======= Prettier ========
let g:prettier#autoformat = 1
let g:prettier#autoformat_require_pragma = 0


" ===== Sass, Scss compile ====
" let g:sass_compile_auto = 1
" let g:sass_compile_cdloop = 5
" let g:sass_compile_cssdir = ['css', 'stylesheet']
" let g:sass_compile_file = ['scss', 'sass']
" let g:sass_compile_beforecmd = ''
" let g:sass_compile_aftercmd = ''
" autocmd FileType less,sass  setlocal sw=2 sts=2 ts=2 et
" au! BufWritePost * SassCompile

" ===== Bracey live server =====
" let g:bracey_browser_command = 1
" let g:bracey_refresh_on_save = 1

" ======  Gutentags ======
let g:gutentags_project_root = ['Makefile']
let g:gutentags_enabled = 1

" ====== Tagbar ========
nmap <silent><F8> :TagbarToggle<CR>

" ===== Comfortable scroll =====
let g:comfortable_motion_scroll_down_key = "j"
let g:comfortable_motion_scroll_up_key = "k"

" ======== Easy align ========
nmap ga <Plug>(EasyAlign)

" ===== Auto pairs ======
let g:AutoPairsFlyMode = 1

" =====Rainbow parentheses =====
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max = 16
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" ======= Multi cursors ========
let g:multi_cursor_use_default_mapping=1

" Default mapping
let g:multi_cursor_start_word_key           = '<C-n>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key                       = 'g<C-n>'
let g:multi_cursor_select_all_key             = 'g<A-n>'
let g:multi_cursor_next_key                        = '<C-n>'
let g:multi_cursor_prev_key                        = '<C-p>'
let g:multi_cursor_skip_key                         = '<C-x>'
let g:multi_cursor_quit_key                         = '<Esc>'

    func! Multiple_cursors_before()
      if deoplete#is_enabled()
        call deoplete#disable()
        let g:deoplete_is_enable_before_multi_cursors = 1
      else
        let g:deoplete_is_enable_before_multi_cursors = 0
      endif
    endfunc
    func! Multiple_cursors_after()
      if g:deoplete_is_enable_before_multi_cursors
        call deoplete#enable()
      endif
    endfunc

" ========= Vim devicons =========
set guifont=:h
set encoding=utf-8
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1
let g:webdevicons_enable_unite = 1
let g:webdevicons_conceal_nerdtree_brackets = 1

" =====+++ OTHER CONFIGS +++=====
" save and quit files custom key maps
nnoremap <C-Q> <Esc>:wq<CR>
nnoremap <c-s> :w<CR>
inoremap <c-s> <Esc>:w<CR>l
vnoremap <c-s> <Esc>:w<CR>

" =============END==============
"
